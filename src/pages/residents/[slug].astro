---
import type { SanityDocument } from "@sanity/client";
import { sanityClient } from "sanity:client";
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { PortableText } from "astro-portabletext";
import Layout from "../../layouts/Layout.astro";

const POST_QUERY = `*[_type == "resident" && slug.current == $slug][0]`;
const resident = await sanityClient.fetch<SanityDocument>(
	POST_QUERY,
	Astro.params
);

export async function getStaticPaths(): Promise<{ params: { slug: string } }> {
	const SLUGS_QUERY = `*[_type == "resident" && defined(slug.current)]{
    "params": {"slug": slug.current}
  }`;
	return await sanityClient.fetch(SLUGS_QUERY, Astro.params);
}

const { projectId, dataset } = sanityClient.config();
const urlFor = (source: SanityImageSource) =>
	projectId && dataset
		? imageUrlBuilder({ projectId, dataset }).image(source)
		: null;
const residentImageUrl = resident.image
	? urlFor(resident.image)?.width(500).height(500).url()
	: null;
---

<Layout>
	<div class="resident-grid-wrapper">
		<div class="resident-grid">
			<div class="main">
				<h1>{resident.title}</h1>

				<PortableText value={resident.body} />
			</div>

			<div class="sidebar">
				{
					residentImageUrl && (
						<img
							src={residentImageUrl}
							alt={resident.title}
						/>
					)
				}
			</div>
		</div>
	</div>
</Layout>
<style>
	.resident-grid-wrapper {
		grid-column: content;
	}
	.resident-grid {
		display: grid;
		gap: var(--length-spacer);
	}

	.main {
		grid-row: 2;
	}

	.sidebar {
		grid-row: 1;
	}

	@media (width > 40rem) {
		.resident-grid {
			grid-template-columns: 1fr min(30vw, 20rem);
		}
		.main {
			grid-row: 1;
			grid-column: 1;
		}

		.sidebar {
			grid-row: 1;
			grid-column: 2;
		}
	}

	img {
		display: block;
		width: 100%;
		height: auto;
		background-color: var(--color-text);
	}
</style>
